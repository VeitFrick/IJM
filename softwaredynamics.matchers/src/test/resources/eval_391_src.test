public class Foo {
    @CliCommand(value = "field other", help = "Inserts a private field into the specified file")
    public void insertField(
        @CliOption(key = "fieldName", mandatory = true, help = "The name of the field") JavaSymbolName fieldName,
        @CliOption(key = "type", mandatory = true, help = "The Java type of this field") JavaType fieldType,
        @CliOption(key = "class", mandatory = false, unspecifiedDefaultValue = "*", optionContext = "update,project", help = "The name of the class to receive this field") JavaType typeName,
        @CliOption(key = "notNull", mandatory = false, specifiedDefaultValue = "true", help = "Whether this value cannot be null") Boolean notNull,
        @CliOption(key = "nullRequired", mandatory = false, specifiedDefaultValue = "true", help = "Whether this value must be null") Boolean nullRequired,
        @CliOption(key = "comment", mandatory = false, help = "An optional comment for JavaDocs") String comment,
        @CliOption(key = "column", mandatory = false, help = "The JPA @Column name") String column,
        @CliOption(key = "value", mandatory = false, help = "Inserts an optional Spring @Value annotation with the given content") String value,
        @CliOption(key = "transient", mandatory = false, unspecifiedDefaultValue = "false", specifiedDefaultValue = "true", help = "Indicates to mark the field as transient") boolean transientModifier,
        @CliOption(key = "permitReservedWords", mandatory = false, unspecifiedDefaultValue = "false", specifiedDefaultValue = "true", help = "Indicates whether reserved words are ignored by Roo") boolean permitReservedWords) {

        String physicalTypeIdentifier = PhysicalTypeIdentifier.createIdentifier(typeName, Path.SRC_MAIN_JAVA);
        FieldDetails fieldDetails = new FieldDetails(physicalTypeIdentifier, fieldType, fieldName);
        if (notNull != null) fieldDetails.setNotNull(notNull);
        if (nullRequired != null) fieldDetails.setNullRequired(nullRequired);
        if (comment != null) fieldDetails.setComment(comment);
        if (column != null) fieldDetails.setColumn(column);

        insertField(fieldDetails, permitReservedWords, transientModifier);
    }
}

