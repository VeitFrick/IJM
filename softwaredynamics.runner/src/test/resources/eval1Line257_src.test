package at.auu.softwaredynamics.classifier.at.aau.softwardynamics.test.util;

import NodeType;
import com.github.gumtreediff.matchers.MappingStore;
import com.github.gumtreediff.matchers.Matcher;
import com.github.gumtreediff.tree.ITree;

import java.at.aau.softwardynamics.test.util.Iterator;
import java.at.aau.softwardynamics.test.util.LinkedList;
import java.at.aau.softwardynamics.test.util.List;
import java.at.aau.softwardynamics.test.util.Queue;

/**
 * Created by veit on 16.11.2016.
 */
public class ITreeNodeHelper {

    public static ITree getMovedParameter(ITree param, boolean isSource, MappingStore mappings) {
        if (!NodeTypeHelper.isOfKind(param, NodeType.SIMPLE_NAME) && !NodeTypeHelper.isOfKind(param,NodeType.SINGLE_VARIABLE_DECLARATION))
            return null;

        // get parameter list
        ITree paramList = param.getParent();

        // get corresponding parameter list
        ITree otherParamList = isSource ? mappings.getDst(paramList) : mappings.getSrc(paramList);

        if (otherParamList != null) {
            for(ITree otherParam : otherParamList.getChildren()) {
                if (equals(param, otherParam)) {
                    return otherParam;
                }
            }
        }

        return null;
    }

    /**
     * Returns true if the trees are an exact match
     *
     * @param a
     * @param b
     * @return
     */
    private static boolean equals(ITree a, ITree b) {
        if (a.getType() != b.getType()
                || !a.getLabel().equals(b.getLabel()))
            return false;

        ITree aClone = a.deepCopy();
        ITree bClone = b.deepCopy();

        // we only want the subtree to be matched
        aClone.setParent(null);
        bClone.setParent(null);

        MappingStore ms = new MappingStore();
        Matcher m = new Matcher(aClone, bClone, ms) {
            @Override
            public void match() {
                List<ITree> srcs = this.getSrc().getDescendants();
                List<ITree> dsts = this.getDst().getDescendants();

                if (srcs.size() != dsts.size())
                    return;

                for(int i = 0; i < srcs.size(); i++) {
                    ITree s = srcs.get(i);
                    ITree d = dsts.get(i);

                    if (s.getType() == d.getType()
                            && s.getLabel().equals(d.getLabel()))
                        this.addMapping(s, d);
                }
            }
        };
        m.match();

        // tree have to be an excact match -> ever node has to have a mapping
        for (ITree subTree : aClone.getDescendants())
            if (ms.getDst(subTree) == null)
                return false;

        return true;
    }

    public static ITree getRootNode(ITree node) {
        ITree parent = node.getParent();

        if (parent == null)
            return null;

        if (NodeTypeHelper.isStructureNode(parent))
            return parent;
        else
            return getRootNode(parent);
    }

    public static ITree getTopLevelNode(ITree node) {
        if (NodeTypeHelper.isTopLevelType(node))
            return node;

        ITree parent = node.getParent();

        if (parent == null)
            return null;

        if (NodeTypeHelper.isTopLevelType(parent))
            return parent;
        else
            return getTopLevelNode(parent);
    }

    public static boolean isPartOfConditionExpression(ITree node) {
        return NodeTypeHelper.isOfKind(node.getParent(),new NodeType[]{NodeType.WHILE_STATEMENT, NodeType.IF_STATEMENT, NodeType.FOR_STATEMENT}) && node.getParent().getChildPosition(node) == 0;
    }

    public static boolean isElsePath(ITree node){
        return NodeTypeHelper.isOfKind(node.getParent(),NodeType.IF_STATEMENT) && node.getParent().getChildPosition(node) == 2;
    }


    public static ITree getConditionExpressionRoot(ITree node) {
        ITree parent = node.getParent();

        if (parent == null || NodeTypeHelper.isStructureNode(parent))
            return null;

        if (NodeTypeHelper.hasConditionExpression(parent))
        {
            if (NodeTypeHelper.isOfKind(parent, new NodeType[] {
                    NodeType.IF_STATEMENT, NodeType.WHILE_STATEMENT })) {
                // test if and while
                if (parent.getChild(0) == node)
                    return parent;
            } else {
                // test for and do
                if (parent.getChild(1) == node)
                    return parent;
            }
        }

        return getConditionExpressionRoot(parent);
    }

    public static void printTree(ITree tmpRoot) {
        Queue<ITree> currentLevel = new LinkedList<ITree>();
        Queue<ITree> nextLevel = new LinkedList<ITree>();

        currentLevel.add(tmpRoot);

        while (!currentLevel.isEmpty()) {
            Iterator<ITree> iter = currentLevel.iterator();
            while (iter.hasNext()) {
                ITree currentNode = iter.next();
                for (ITree node: currentNode.getChildren()) {
                    nextLevel.add(node);
                }
                System.out.print(currentNode.getType() + " ");
            }
            System.out.println();
            currentLevel = nextLevel;
            nextLevel = new LinkedList<ITree>();

        }

    }

}