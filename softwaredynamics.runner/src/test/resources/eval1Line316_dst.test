package files;

import JChangeClassifier;
import SourceCodeChange;
import com.github.gumtreediff.gen.jdt.JdtTreeGenerator;
import com.github.gumtreediff.tree.TreeContext;
import org.apache.commons.io.input.NullInputStream;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.errors.StopWalkException;
import org.eclipse.jgit.lib.AbbreviatedObjectId;
import org.eclipse.jgit.lib.AnyObjectId;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.revwalk.filter.RevFilter;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.filter.PathSuffixFilter;
import org.eclipse.jgit.treewalk.filter.TreeFilter;
import org.eclipse.jgit.at.aau.softwardynamics.test.util.io.NullOutputStream;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.at.aau.softwardynamics.test.util.ArrayList;
import java.at.aau.softwardynamics.test.util.Collection;
import java.at.aau.softwardynamics.test.util.List;
import java.at.aau.softwardynamics.test.util.Vector;

/**
 * Created by veit on 22.11.2016.
 */
public class ExportHandler {
    private String filePath = "C:\\test1";
    private String fileName = "hmm";
    private String extension = "txt";

    public FileHandler fileHandler = new FileHandler(filePath, extension);
    private List<String> lines = new ArrayList<String>();

    public void appendLine(String s){
        lines.add(s);
    }

    public void writeToFile(){
        fileHandler.writeToFileNoOverride(fileName,lines);
        lines.clear();
    }

    public static void main(String[] args) {
        ExportHandler eh = new ExportHandler();
        System.out.println(eh.fileHandler.getFilePath());

        Repository repository = null;

        try {
            repository = openRepository("C:\\Users\\thomas\\IdeaProjects\\softwaredynamics");
            Collection<RevCommit> commits = getCommits(repository, "HEAD");

            for (RevCommit commit : commits) {
                analyzeCommit(commit, repository, eh);
            }

            eh.writeToFile();

        } catch (IOException e) {
            System.out.println("Repository not found!");
            return;
        }
    }

    private static void analyzeCommit(RevCommit commit, Repository repository, ExportHandler eh) throws IOException {

        RevCommit[] parents = commit.getParents().length > 0
                ? commit.getParents()           // diff with parents
                : new RevCommit[] { null };     // diff with null

        for (RevCommit parent : parents) {
            DiffFormatter df = new DiffFormatter(NullOutputStream.INSTANCE);
            df.setRepository(repository);
            df.setPathFilter(PathSuffixFilter.create(".java"));
            df.setDetectRenames(true);

            List<DiffEntry> diffs = df.scan(parent, commit.getTree());

            for (DiffEntry diff : diffs) {
                InputStream src = getFileStream(diff.getOldId(), repository);
                InputStream dst = getFileStream(diff.getNewId(), repository);

                JdtTreeGenerator treeGenerator = new JdtTreeGenerator();
                TreeContext srcContext = treeGenerator.generateFromStream(src);
                TreeContext dstContext = treeGenerator.generateFromStream(dst);

                JChangeClassifier classifier = new JChangeClassifier(true);

                List<SourceCodeChange> changes = classifier.classify(srcContext, dstContext);

                for(SourceCodeChange change : changes) {

                    eh.appendLine(change.getChangeType() + ";" +
                            change.getNodeType() + ";" +
                            change.getAction() + ";" +
                            change.getPosition() + ";" +
                            change.getLength() + ";" +
                            getFilePath(diff.getNewPath()));
                }
            }
        }
    }

    public static String getFilePath(String path) {
        return path.equals(DiffEntry.DEV_NULL) ? null : path;
    }

    public class Test {

    }

    private static InputStream getFileStream(AbbreviatedObjectId objectId, Repository repository) throws IOException {
        AnyObjectId anyObjectId = objectId.toObjectId();

        if (anyObjectId != null && !anyObjectId.equals(ObjectId.zeroId()))
            return repository.open(objectId.toObjectId()).openStream();

        return new NullInputStream(0);
    }

    private static Repository openRepository(String repoPath) throws IOException {
        FileRepositoryBuilder builder = new FileRepositoryBuilder();

        Repository repository = builder
                .readEnvironment()
                .setGitDir(new File(repoPath + "/.git"))
                .build();

        return repository;
    }

    private static Collection<RevCommit> getCommits(Repository repository, String startCommit) throws IOException {
        RevWalk walk = new RevWalk(repository);

        // set start commit
        walk.markStart(walk.parseCommit(repository.resolve(startCommit)));

        // set filter
        walk.setRevFilter(new RevFilter() {
            @Override
            public boolean include(RevWalk walker, RevCommit cmit) throws StopWalkException, IOException {
                if (cmit.getParentCount() > 1)
                    // this is a merge commit
                    return false;

                return true;
            }

            @Override
            public RevFilter clone() {
                return null;
            }
        });

        // extract commits
        List<RevCommit> commits = new Vector<>();
        RevCommit commit;
        while ((commit = walk.next()) != null) {
            commits.add(commit);
        }

        return commits;
    }
}